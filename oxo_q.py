# -*- coding: utf-8 -*-
"""OXO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bC5i9gsNFomLKhaPHNKsyls8uTfpNT5j
"""

import numpy as np
import random
import pandas as pd

def play_lin(game, m):
  game = game.reshape(3,3)
  if m == 2:
    m_ = 1
  else:
    m_ = 2
  for mark in [m,m_]:
    for lin in range(3):  
      if (game == mark)[lin,].sum() == 2:
        a = np.argmin(game[lin,:] == m)
        if game[lin,a] == 0:
          return lin * 3 + a

  return -1


def play_col(game,m):
  game = game.reshape(3,3)
  if m == 2:
    m_ = 1
  else:
    m_ = 2
  for mark in [m,m_]:
    for col in range(3):  
      if (game == mark)[:,col].sum() == 2:
        a = np.argmin(game[:,col] == m)
        if game[a,col] == 0:
          return a * 3 + col
    
  return -1

def play_diag1(game, m):  
  game = game.reshape(3,3)
  if m == 2:
    m_ = 1
  else:
    m_ = 2

  for mark in (m,m_):
    s = 0
    for lin in range(3):  
      s += (game == mark)[lin,lin]
    if s == 2:
      for lin in range(3):
        a = (game != m)[lin,lin]
        if a:
          if game[lin,lin] == 0:
            return lin * 3 + lin
  return -1

def play_diag2(game, m):  
  game = game.reshape(3,3)
  if m == 2:
    m_ = 1
  else:
    m_ = 2

  for mark in (m,m_):
    s = 0
    for lin in range(3):  
      s += (game == mark)[2 - lin,lin]
    if s == 2:
      for lin in range(3):
        a = (game != m)[2 - lin,lin]
        if a:
          if game[2 - lin,lin] == 0:
            return (2 - lin) * 3 + lin
  return -1



def check_lin(game):
  game = game.reshape(3,3)
  for mark in [1,2]:
    for lin in range(3):  
      if (game == mark)[lin,].sum() == 3:
        return 2
    
  return 0

def check_col(game):
  game = game.reshape(3,3)
  for mark in [1,2]:
    for col in range(3):  
      if (game == mark)[:,col].sum() == 3:
        return 2
    
  return 0

def check_diag1(game):  
  game = game.reshape(3,3)
  for mark in (1,2):
    s = 0
    for lin in range(3):  
      s += (game == mark)[lin,lin]
    if s == 3:
        return 2
  return 0

def check_diag2(game):
  game = game.reshape(3,3)
  for mark in [1,2]:
    s = 0
    for lin in range(3):  
      s += (game == mark)[2-lin,lin]
    if s == 3:
        return 2
  return 0

def check_tied(game):
  game = game.reshape(3,3)
  if (game != 0).sum() == 9:
    return 1
  else:
    return 0

def check_game(game):
  a = check_lin(game)
  b = check_col(game)
  c = check_diag1(game)
  d = check_diag2(game)
  e = check_tied(game)
  
  if a == 2:
    return a
  
  if b == 2:
    return b
  
  if c == 2:
    return c
  
  if d == 2:
    return d
  
  if e == 1:
    return e
  
  return 0

def play_game(game, mark):
  
  al = play_lin(game, mark)

  if al != -1:
    game[al] = mark
    return al

  ac = play_col(game, mark)

  if ac != -1:
    game[ac] = mark
    return ac

  ad1 = play_diag1(game, mark)

  if ad1 != -1:
    game[ad1] = mark
    return ad1

  ad2 = play_diag2(game, mark)

  if ad2 != -1:
    game[ad2] = mark
    return ad2


  while(True):
  
    col = random.randint(0,8)

    if game[col] == 0:      
      game[col] = mark
      return col


def iteration(inumber):
  OXO = np.zeros(9)

  data_game = []

  p = False

  while(not p):
    for mark in (1, 2):
      OXOc = OXO.copy()

      y = play_game(OXO, mark)
      r = check_game(OXO)
      p = r > 0
      
      a = np.append(OXOc, [mark, y, c])
      
      data_game.append(a)
      if p:
        break        
        
  for q in data_game:
    if q[9] == mark or c == 1 :
      q[-1] = c

  return data_game




