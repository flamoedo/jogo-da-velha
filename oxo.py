# -*- coding: utf-8 -*-
"""OXO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bC5i9gsNFomLKhaPHNKsyls8uTfpNT5j
"""

import numpy as np
import random
import pandas as pd

def check_lin(game):
  for mark in ['O','X']:
    for lin in range(3):  
      if (game == mark)[lin,].sum() == 3:
        return True, mark, 2
    
  return False, ''

def check_col(game):
  for mark in ['O','X']:
    for col in range(3):  
      if (game == mark)[:,col].sum() == 3:
        return True, mark, 2
    
  return False, ''

def check_diag1(game):  
  for mark in ('O','X'):
    s = 0
    for lin in range(3):  
      s += (game == mark)[lin,lin]
  if s == 3:
      return True, mark, 2
  else:
      return False,''

def check_diag2(game):
  for mark in ['O','X']:
    s = 0
    for lin in range(3):  
      s += (game == mark)[2-lin,lin]
  if s == 3:
      return True, mark, 2
  else:
      return False,''

def check_tied(game):
  if (game != '').sum() == 9:
    return True, 'empate', 1
  else:
    return False, ''

def check_game(game):
  a = check_lin(game)
  b = check_col(game)
  c = check_diag1(game)
  d = check_diag2(game)
  e = check_tied(game)
  
  if a[0]:
    return a
  
  if b[0]:
    return b
  
  if c[0]:
    return c
  
  if d[0]:
    return d
  
  if e[0]:
    return e
  
  return False, '', 0

def play_game(game, mark):
  
#   c = check_game(game)
#   if c[0]:
#     return c, '', -1, -1
  
  
  while(True):
  
    lin = random.randint(0,2)
    col = random.randint(0,2)

    if game[lin, col] == '':      
      game[lin, col] = mark
      return False, mark, lin, col

def check(game, Q):
  i = 0
  for q in Q:
    if ((game[0] == q[0]).all()):      
      return True, i
    i += 1
  return False, i

Q = []
p = []

OXO = np.array([['','',''],['','',''],['','','']])

data_game = []

dg = []

r = False

while(not r):
  for mark in ('X', 'O'):
    if not r:
      OXOc = OXO.copy()
      ry = play_game(OXO, mark)
      c = check_game(OXO)
      r = c[0]
      
      data_game.append([OXOc, ry[1:], c])
      
      
for q in data_game:
  if q[1][1] == c[1] or c[1] == 'empate' :
    q[2] = c
        



for g in data_game:
  ch = check(g, Q)
  if ch[0]:
    p[ch[1]] += g[2][2]
  else:
    Q.append(g[:2])
    p.append(g[2][2])





